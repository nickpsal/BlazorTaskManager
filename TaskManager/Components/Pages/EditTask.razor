@page "/edittask"
@page "/edittask/{task}"
@rendermode InteractiveServer

<h3>EditTask</h3>
<EditForm Model="@formData" OnValidSubmit="HandleFormSubmit" formname="newTaskForm">
    <DataAnnotationsValidator />
    <div class="form-group">
        <label for="TaskName">Task Name:</label>
        <InputText id="TaskName" @bind-Value="formData.TaskName" class="form-control" />
        <ValidationMessage For="@(() => formData.TaskName)" />
    </div>
    <div class="form-group">
        <label for="TaskDesc">Task Desc:</label>
        <InputText id="TaskDesc" @bind-Value="formData.TaskDesc" class="form-control" />
        <ValidationMessage For="@(() => formData.TaskDesc)" />
    </div>
    <div class="form-group">
        <label for="taskSetupDate">task Setup Date:</label>
        <InputDate id="taskSetupDate" @bind-Value="formData.taskSetupDate" class="form-control" />
        <ValidationMessage For="@(() => formData.taskSetupDate)" />
    </div>
    <div class="form-group">
        <label for="taskScheduleDate">task Schedule Date:</label>
        <InputDate id="taskScheduleDate" @bind-Value="formData.taskScheduleDate" class="form-control" />
        <ValidationMessage For="@(() => formData.taskScheduleDate)" />
    </div>
    <div class="form-group">
        <label for="StartTime">Start Time (24 Hour):</label>
        <InputText id="StartTime" @bind-Value="formData.StartTime" class="form-control" />
        <ValidationMessage For="@(() => formData.StartTime)" />
    </div>
    <div class="form-group">
        <label for="EndTime">End Time (24 Hour):</label>
        <InputText id="EndTime" @bind-Value="formData.EndTime" class="form-control" />
        <ValidationMessage For="@(() => formData.EndTime)" />
    </div>
    <button class="btn btn-primary" type="submit">Update</button>
</EditForm>

@code {
    [Parameter]
    public required UserTask task { get; set; }
    private FormData formData = new();

    private class FormData
    {
        [Required(ErrorMessage = "Name is required")]
        public string TaskName { get; set; } = string.Empty; 
        [Required(ErrorMessage = "Task Desc is required")]
        public string TaskDesc { get; set; } = string.Empty;
        [Required(ErrorMessage = "task Setup Date is required")]
        public DateTime taskSetupDate { get; set; }
        [Required(ErrorMessage = "task Schedule Date is required")]
        public DateTime taskScheduleDate { get; set; }
        [Required(ErrorMessage = "Start Time is required")]
        public string StartTime { get; set; } = string.Empty;
        [Required(ErrorMessage = "End Time is required")]
        public string EndTime { get; set; } = string.Empty;
    }

    protected override void OnInitialized()
    {
        formData.TaskName = task.TaskName;
        formData.TaskDesc = task.TaskDesc;
        formData.taskSetupDate = DateTime.Parse(task.taskSetupDate);
        formData.taskScheduleDate = DateTime.Parse(task.taskScheduleDate);
        formData.StartTime = task.StartTime;
        formData.EndTime = task.TaskDesc;
    }

    private void HandleFormSubmit()
    {
        
    }
}